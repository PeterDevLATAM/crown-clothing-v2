{"ast":null,"code":"var _jsxFileName = \"/Users/Peter/Coding/Complete React ZTM/E-ShopV2/crwn-clothing-v2/src/context/cart.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, createContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst addCartItem = (cartItems, productToAdd) => {\n  //check if item is already on the cart\n  const existingItem = cartItems.find(item => item.id === productToAdd.id); //if it is, incremetn its quantity\n\n  if (existingItem) {\n    return cartItems.map(item => item.id === productToAdd.id ? { ...item,\n      quantity: item.quantity + 1\n    } : {\n      item\n    });\n  }\n\n  return [...cartItems, { ...productToAdd,\n    quantity: 1\n  }]; //return an array with the updated cartItems\n};\n\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => null,\n  cartItems: [],\n  addItemToCart: () => {}\n});\nexport const CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([]);\n\n  const addItemToCart = productToAdd => {\n    setCartItems(addCartItem(cartItems, productToAdd));\n  };\n\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    cartItems,\n    addItemToCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CartProvider, \"X7m0wQJ+zlrOgjCUh5u2IGGBLdE=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/Peter/Coding/Complete React ZTM/E-ShopV2/crwn-clothing-v2/src/context/cart.context.jsx"],"names":["useState","createContext","addCartItem","cartItems","productToAdd","existingItem","find","item","id","map","quantity","CartContext","isCartOpen","setIsCartOpen","addItemToCart","CartProvider","children","setCartItems","value"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,aAAnB,QAAwC,OAAxC;;;AAEA,MAAMC,WAAW,GAAG,CAACC,SAAD,EAAYC,YAAZ,KAA6B;AAC/C;AACA,QAAMC,YAAY,GAAGF,SAAS,CAACG,IAAV,CAAgBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,YAAY,CAACI,EAAlD,CAArB,CAF+C,CAI/C;;AACA,MAAIH,YAAJ,EAAkB;AAChB,WAAOF,SAAS,CAACM,GAAV,CAAeF,IAAD,IACjBA,IAAI,CAACC,EAAL,KAAYJ,YAAY,CAACI,EAAzB,GACI,EAAE,GAAGD,IAAL;AAAWG,MAAAA,QAAQ,EAACH,IAAI,CAACG,QAAL,GAAe;AAAnC,KADJ,GAEI;AAAEH,MAAAA;AAAF,KAHD,CAAP;AAMD;;AACD,SAAO,CAAC,GAAGJ,SAAJ,EAAe,EAAC,GAAGC,YAAJ;AAAkBM,IAAAA,QAAQ,EAAC;AAA3B,GAAf,CAAP,CAb+C,CAiB/C;AACD,CAlBD;;AAoBA,OAAO,MAAMC,WAAW,gBAAGV,aAAa,CAAC;AACvCW,EAAAA,UAAU,EAAE,KAD2B;AAEvCC,EAAAA,aAAa,EAAE,MAAM,IAFkB;AAGvCV,EAAAA,SAAS,EAAE,EAH4B;AAIvCW,EAAAA,aAAa,EAAE,MAAM,CAAE;AAJgB,CAAD,CAAjC;AAOP,OAAO,MAAMC,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5C,QAAM,CAACJ,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACG,SAAD,EAAYc,YAAZ,IAA4BjB,QAAQ,CAAC,EAAD,CAA1C;;AAEA,QAAMc,aAAa,GAAIV,YAAD,IAAkB;AACtCa,IAAAA,YAAY,CAACf,WAAW,CAACC,SAAD,EAAYC,YAAZ,CAAZ,CAAZ;AACD,GAFD;;AAIA,QAAMc,KAAK,GAAG;AAAEN,IAAAA,UAAF;AAAcC,IAAAA,aAAd;AAA6BV,IAAAA,SAA7B;AAAwCW,IAAAA;AAAxC,GAAd;AAEA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEI,KAA7B;AAAA,cAAqCF;AAArC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAXM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import { useState, createContext } from \"react\";\n\nconst addCartItem = (cartItems, productToAdd) => {\n  //check if item is already on the cart\n  const existingItem = cartItems.find((item) => item.id === productToAdd.id);\n\n  //if it is, incremetn its quantity\n  if (existingItem) {\n    return cartItems.map((item) =>\n        item.id === productToAdd.id\n          ? { ...item, quantity:item.quantity +1 }\n          : { item }\n      )\n    \n  }\n  return [...cartItems, {...productToAdd, quantity:1}]\n\n  \n\n  //return an array with the updated cartItems\n};\n\nexport const CartContext = createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => null,\n  cartItems: [],\n  addItemToCart: () => {},\n});\n\nexport const CartProvider = ({ children }) => {\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([]);\n\n  const addItemToCart = (productToAdd) => {\n    setCartItems(addCartItem(cartItems, productToAdd));\n  };\n\n  const value = { isCartOpen, setIsCartOpen, cartItems, addItemToCart };\n\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}