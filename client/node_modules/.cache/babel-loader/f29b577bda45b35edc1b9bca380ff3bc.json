{"ast":null,"code":"import { async } from \"@firebase/util\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from \"firebase/auth\"; //Auth\n\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\"; //DB\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBLmE9OJUrr-zhvYlhH7FMb4aIsa8lps-k\",\n  authDomain: \"crwn-db-1c597.firebaseapp.com\",\n  projectId: \"crwn-db-1c597\",\n  storageBucket: \"crwn-db-1c597.appspot.com\",\n  messagingSenderId: \"643591164779\",\n  appId: \"1:643591164779:web:c88af4a10302cacc9f722e\",\n  measurementId: \"G-37VRYC7T2X\"\n};\nconst firebaseApp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async userAuth => {\n  if (!userAuth) return;\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  }\n\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"sources":["/Users/Peter/Coding/Complete React ZTM/E-ShopV2/crwn-clothing-v2/src/utils/firebase/firebase.utils.js"],"names":["async","initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","console","log","message","createAuthUserWithEmailAndPassword","password"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SACEC,OADF,EAEEC,kBAFF,EAGEC,eAHF,EAIEC,kBAJF,EAKEC,8BALF,QAMO,eANP,C,CAMwB;;AAExB,SAASC,YAAT,EAAuBC,GAAvB,EAA4BC,MAA5B,EAAoCC,MAApC,QAAkD,oBAAlD,C,CAAwE;;AAExE,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,+BAFS;AAGrBC,EAAAA,SAAS,EAAE,eAHU;AAIrBC,EAAAA,aAAa,EAAE,2BAJM;AAKrBC,EAAAA,iBAAiB,EAAE,cALE;AAMrBC,EAAAA,KAAK,EAAE,2CANc;AAOrBC,EAAAA,aAAa,EAAE;AAPM,CAAvB;AAUA,MAAMC,WAAW,GAAGlB,aAAa,CAACU,cAAD,CAAjC;AAEA,MAAMS,cAAc,GAAG,IAAIf,kBAAJ,EAAvB;AAEAe,cAAc,CAACC,mBAAf,CAAmC;AACjCC,EAAAA,MAAM,EAAE;AADyB,CAAnC;AAIA,OAAO,MAAMC,IAAI,GAAGrB,OAAO,EAApB;AACP,OAAO,MAAMsB,qBAAqB,GAAG,MACnCpB,eAAe,CAACmB,IAAD,EAAOH,cAAP,CADV;AAEP,OAAO,MAAMK,wBAAwB,GAAG,MACtCtB,kBAAkB,CAACoB,IAAD,EAAOH,cAAP,CADb;AAGP,OAAO,MAAMM,EAAE,GAAGnB,YAAY,EAAvB;AAEP,OAAO,MAAMoB,0BAA0B,GAAG,MAAOC,QAAP,IAAoB;AAC5D,MAAI,CAACA,QAAL,EAAe;AACf,QAAMC,UAAU,GAAGrB,GAAG,CAACkB,EAAD,EAAK,OAAL,EAAcE,QAAQ,CAACE,GAAvB,CAAtB;AAEA,QAAMC,YAAY,GAAG,MAAMtB,MAAM,CAACoB,UAAD,CAAjC;;AAEA,MAAI,CAACE,YAAY,CAACC,MAAb,EAAL,EAA4B;AAC1B,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBN,QAA/B;AACA,UAAMO,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAM1B,MAAM,CAACmB,UAAD,EAAa;AACvBI,QAAAA,WADuB;AAEvBC,QAAAA,KAFuB;AAGvBC,QAAAA;AAHuB,OAAb,CAAZ;AAKD,KAND,CAME,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,KAAK,CAACG,OAA7C;AACD;AACF;;AAED,SAAOX,UAAP;AACD,CAtBM;AAwBP,OAAO,MAAMY,kCAAkC,GAAG,OAAOP,KAAP,EAAcQ,QAAd,KAA2B;AAC3E,MAAI,CAACR,KAAD,IAAU,CAACQ,QAAf,EAAyB;AACzB,SAAO,MAAMpC,8BAA8B,CAACiB,IAAD,EAAOW,KAAP,EAAcQ,QAAd,CAA3C;AACD,CAHM","sourcesContent":["import { async } from \"@firebase/util\";\nimport { initializeApp } from \"firebase/app\";\nimport {\n  getAuth,\n  signInWithRedirect,\n  signInWithPopup,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n} from \"firebase/auth\"; //Auth\n\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\"; //DB\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBLmE9OJUrr-zhvYlhH7FMb4aIsa8lps-k\",\n  authDomain: \"crwn-db-1c597.firebaseapp.com\",\n  projectId: \"crwn-db-1c597\",\n  storageBucket: \"crwn-db-1c597.appspot.com\",\n  messagingSenderId: \"643591164779\",\n  appId: \"1:643591164779:web:c88af4a10302cacc9f722e\",\n  measurementId: \"G-37VRYC7T2X\",\n};\n\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst googleProvider = new GoogleAuthProvider();\n\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\",\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () =>\n  signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () =>\n  signInWithRedirect(auth, googleProvider);\n\nexport const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async (userAuth) => {\n  if (!userAuth) return;\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n\n  const userSnapshot = await getDoc(userDocRef);\n\n  if (!userSnapshot.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  }\n\n  return userDocRef;\n};\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\n"]},"metadata":{},"sourceType":"module"}