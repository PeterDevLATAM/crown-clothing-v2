{"ast":null,"code":"var _jsxFileName = \"/Users/Peter/Coding/Complete React ZTM/E-ShopV2/crwn-clothing-v2/src/context/cart.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, createContext } from \"react\";\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst addCartItem = (cartItems, productToAdd) => {\n  //check if item is already on the cart\n  const existingItem = cartItems.find(item => item.id === productToAdd.id); //if it is, incremetn its quantity\n\n  if (existingItem) {\n    return cartItems.map(item => item.id === productToAdd.id ? { ...item,\n      quantity: item.quantity + 1\n    } : item);\n  }\n\n  return [...cartItems, { ...productToAdd,\n    quantity: 1\n  }]; //return an array with the updated cartItems\n};\n\nconst substractCartItem = (cartItems, itemToSubstract) => {\n  const existingItem = cartItems.find(item => item.id === itemToSubstract.id);\n  if (existingItem.quantity == 1) return cartItems.filter(item => item.id !== itemToSubstract.id);\n  return cartItems.map(item => item.id === itemToSubstract.id ? { ...item,\n    quantity: item.quantity - 1\n  } : item);\n};\n\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => null,\n  cartItems: [],\n  addItemToCart: () => {},\n  substractItemFromCart: () => {},\n  cartCount: 0\n});\nexport const CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([]);\n  const [cartCount, setCartCount] = useState(0);\n\n  const addItemToCart = productToAdd => {\n    setCartItems(addCartItem(cartItems, productToAdd));\n  };\n\n  const substractItemFromCart = productToSubstract => {\n    setCartItems(substractCartItem(cartItems, productToSubstract));\n  };\n\n  useEffect(() => {\n    setCartCount(cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0));\n  }, [cartItems]);\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    cartItems,\n    addItemToCart,\n    cartCount,\n    substractItemFromCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CartProvider, \"1STVRVZJMMTq6OZavO9o7qwZdno=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/Peter/Coding/Complete React ZTM/E-ShopV2/crwn-clothing-v2/src/context/cart.context.jsx"],"names":["useState","createContext","useEffect","addCartItem","cartItems","productToAdd","existingItem","find","item","id","map","quantity","substractCartItem","itemToSubstract","filter","CartContext","isCartOpen","setIsCartOpen","addItemToCart","substractItemFromCart","cartCount","CartProvider","children","setCartItems","setCartCount","productToSubstract","reduce","total","cartItem","value"],"mappings":"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","sourcesContent":["import { useState, createContext } from \"react\";\nimport { useEffect } from \"react\";\n\nconst addCartItem = (cartItems, productToAdd) => {\n  //check if item is already on the cart\n  const existingItem = cartItems.find((item) => item.id === productToAdd.id);\n\n  //if it is, incremetn its quantity\n  if (existingItem) {\n    return cartItems.map((item) =>\n      item.id === productToAdd.id\n        ? { ...item, quantity: item.quantity + 1 }\n        : item\n    );\n  }\n  return [...cartItems, { ...productToAdd, quantity: 1 }];\n  //return an array with the updated cartItems\n};\n\nconst substractCartItem = (cartItems, itemToSubstract) => {\n  const existingItem = cartItems.find((item) => item.id === itemToSubstract.id);\n  if (existingItem.quantity==1) return (cartItems.filter(item=>item.id!==itemToSubstract.id));\n  return cartItems.map((item) =>\n    item.id === itemToSubstract.id ? {...item, quantity: item.quantity - 1} : item\n  );\n};\n\nexport const CartContext = createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => null,\n  cartItems: [],\n  addItemToCart: () => {},\n  substractItemFromCart: () => {},\n  cartCount: 0,\n});\n\nexport const CartProvider = ({ children }) => {\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([]);\n  const [cartCount, setCartCount] = useState(0);\n\n  const addItemToCart = (productToAdd) => {\n    setCartItems(addCartItem(cartItems, productToAdd));\n  };\n  const substractItemFromCart = (productToSubstract) => {\n    setCartItems(substractCartItem(cartItems, productToSubstract));\n  };\n\n  useEffect(() => {\n    setCartCount(\n      cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0)\n    );\n  }, [cartItems]);\n\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    cartItems,\n    addItemToCart,\n    cartCount,\n    substractItemFromCart,\n  };\n\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}